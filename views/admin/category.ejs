<%- include('navbarMobile.ejs') %>



<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>

  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.9.0/dist/sweetalert2.min.css">
  <style>
    @media(max-width: 500px){
	
	.table thead{
		display: none;
	}

	.table, .table tbody, .table tr, .table td{
		display: block;
		width: 100%;
	}
	.table tr{
		margin-bottom:15px;
	}
	.table td{
		text-align: right;
		padding-left: 50%;
		text-align: right;
		position: relative;
	}
	.table td::before{
		content: attr(data-label);
		position: absolute;
		left:0;
		width: 50%;
		padding-left:15px;
		font-size:15px;
		font-weight: bold;
		text-align: left;
	}
}
  </style>
</head>

<body>
  <%- include('sidebar.ejs') %>

  <section class="is-title-bar">
    <div class="flex flex-col md:flex-row items-center justify-between space-y-6 md:space-y-0">
      <ul>
        <li>Admin</li>
        <li>category</li>
      </ul>
     
    </div>
  </section>
  <br>
  <!-- <h5>Add Categories</h5> -->
    <button onclick="addCategory()" class="btn btn-primary"><i class="fa-solid fa-user-plus"></i> Add Categories</button>
  
    <section>
      <br>
    <h4>Categories</h4>
    <table class="table table-striped">
      <thead>
        <tr>
          <th>category name</th>
          <th>Edit</th>
          <th>Status</th>
          <th>change status</th>

        </tr>
      </thead>
      <tbody>
        
        <% categories.forEach(function(category) { %>
          <tr>
            <td data-label="Category Name">
              <p id="<%= 'category_' + category._id %>">
                <%= category.categoryName %>
              </p>
            </td>
            <td>
              <button class="btn btn-primary" onclick="editCategory('<%= category._id %>')"><i class="fa-solid fa-file-pen"></i></button>
            </td>
            <td data-label="Category Status">
                <a onclick="categoryStatus('<%= category._id %>')"><i class="fa-solid fa-circle-info"></i></a>
            </td>
            <td data-label="Change Status" >
              <a  onclick="editStatus('<%= category._id %>')">  <i class="fa-solid fa-rotate"></i></a>
            </td>
          </tr>
        <% }) %>
      </tbody>
    </table>
    
  </section>
  <script src="https://kit.fontawesome.com/9310a1ffd7.js" crossorigin="anonymous"></script>

  <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.9.0/dist/sweetalert2.all.min.js"></script>
  <script>
    function editCategory(categoryId) {
      Swal.fire({
        title: 'Enter new category name:',
        input: 'text',
        inputValue: document.getElementById('category_' + categoryId).innerText,
        showCancelButton: true,
        confirmButtonText: 'Save',
        showLoaderOnConfirm: true,
        preConfirm:async (newCategoryName) => {
          const response = await fetch('/admin/categoryedit?id=' + categoryId,{
            method:'PUT',
            headers:{
              'Content-Type': 'application/json',

            },
            body: JSON.stringify({
                categoryId: categoryId,
                newCategoryName: newCategoryName,
              }),
          })
          document.getElementById('category_' + categoryId).innerText = newCategoryName;

        },
      });
    }
    function addCategory() {
  Swal.fire({
    title: 'Add Category',
    input: 'text',
    inputLabel: 'Category Name',
    inputPlaceholder: 'Enter category name',
    showCancelButton: true,
    confirmButtonText: 'Add',
    cancelButtonText: 'Cancel',
    showLoaderOnConfirm: true,
    preConfirm: (categoryName) => {
      return new Promise((resolve) => {
        // Check if category name is empty
        if (!categoryName) {
          Swal.showValidationMessage('Please enter a category name');
          return;
        }

        // Simulate an asynchronous request (replace with your actual logic)
        setTimeout(() => {
          resolve(categoryName);
        }, 1000);
      });
    },
    allowOutsideClick: () => !Swal.isLoading(),
  }).then((result) => {
    if (result.isConfirmed) {
      const categoryName = result.value;

      // Send an AJAX request using the Fetch API
      fetch('/admin/addcategory', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ categoryName }),
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then((data) => {
          // Handle the successful response from the server
          console.log('Server Response:', data);

          if (data.success) {
            Swal.fire({
              title: 'Category Added!',
              text: `You added the category: ${categoryName}`,
              icon: 'success',
            });
          } else {
            Swal.fire({
              title: 'Error',
              text: data.message,
              icon: 'error',
            });
          }
        })
        .catch((error) => {
          console.error('Error:', error);

          Swal.fire({
            title: 'Error',
            text: 'the category already exist or it is null.',
            icon: 'error',
          });
        });
    }
  });
}
function categoryStatus(categoryId) {
      fetch('/admin/categorystatus', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ categoryId }),
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          console.log(data.status);
          const statusText = data.status === 'active' ? 'Activate' : 'Deactivate';
          if (data.status === 'active') {
    Swal.fire({
        title: data.status,
        icon: 'success'
    });
} else {
    Swal.fire({
      title:data.status,
        icon: 'error'
    });
}

          
        } else {
          Swal.fire({
            title: "Error",
            text: "Failed to update category status.",
            icon: "error"
          });
        }
      })
      .catch(error => {
        console.error("Error:", error);
        Swal.fire({
          title: "Error",
          text: "An unexpected error occurred.",
          icon: "error"
        });
      });
    }
 
function editStatus(categoryId) {
  Swal.fire({
    title: "Are you sure?",
    text: "You are changing !", 
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#3085d6",
    cancelButtonColor: "#d33",
    confirmButtonText: "Yes, update it!"
  }).then((result) => {
    if (result.isConfirmed) {
      // Async operation
      fetch('/admin/categoryedit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ categoryId }),
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Update the category status on the webpage
          console.log(data.status);
          const statusText = data.status === 'active' ? 'Activate' : 'Deactivate';

          Swal.fire({
            title: "Changes Made!",
            text: `Category is now ${data.status}.`,
            icon: "success"
          });
        } else {
          Swal.fire({
            title: "Error",
            text: "Failed to update category status.",
            icon: "error"
          });
        }
      })
      .catch(error => {
        console.error("Error:", error);
        Swal.fire({
          title: "Error",
          text: "An unexpected error occurred.",
          icon: "error"
        });
      });
    }
  });
}

  </script>
</body>

</html>
